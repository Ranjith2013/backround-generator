// function declaration

function newFunction(){

}

// function expression

var newFunction= function(){

};

//expression

1=3;
var a=2;
return true;

// calling or invoking function

alert();
newFunction(param1,param2);


//assign a variable

var a= true;

//function vs method

function thisIsFunction(){

}

//method

var obj={
    thisIsMethod: function(){

    }
}
 

obj.thisIsMethod();
thisIsFunction();


//ES6//

//Template Strings
--------------------------------------------------------------------------------------
const name ="sally";
const age="34";
const pet="horse";

//const greeting="hello" +name+ "you see" +age+
const greetingBest= `hello ${name} you see ${age-10} lovely ${pet}`;

// default argumets

function greet(name='',age='30',pet='cat'){
    return `hello ${name} you see ${age-10} lovely ${pet}`
}

--------------------------------------------------------------------------------------


//arrow functions

function add(a,b)
{
    return a=b;
}

const add=(a,b)=> a+b;

-------------------------------ADVANCED FUNCTIONS------------------


//#1 Create a one line function that adds adds two parameters

//Closure: What does the last line return?
const addTo = x => y => x + y
var addToTen = addTo(10)
addToTen(3)

//Currying: What does the last line return?
const sum = (a, b) => a + b
const curriedSum = (a) => (b) => a + b
curriedSum(30)(1)


//Currying: What does the last line return?
const sum = (a, b) => a + b
const curriedSum = (a) => (b) => a + b
const add5 = curriedSum(5)
add5(12)

//Composing: What does the last line return?
const compose = (f, g) => (a) => f(g(a));
const add1 = (num) => num + 1;
const add5 = (num) => num + 5;
compose(add1, add5)(10)

//What are the two elements of a pure function?
//same input same output, produces no side effects
